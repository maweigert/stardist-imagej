#include <iostream>
#include "libstardist3d.h"


int main(int argc, char *argv[])
{

  // const int n_polys = 1;
  // const int n_rays = 6;
  // const int n_faces = 8;

  // //ortho verts
  // const float verts[n_rays*3]{0.,  0.,  1.,  0.,  1.,  0.,  0.,  0., -1.,  0., -1.,  0.,  1., 0.,  0., -1.,  0.,  0.};
  // const int faces[n_faces*3] = {0, 1, 4, 0, 5, 1, 1, 2, 4, 1, 5, 2, 2, 3, 4, 2, 5, 3, 3, 0, 4, 3,5, 0};

  // const float scores[n_polys] = {1.};
  // const float dist[n_polys*n_rays] = {1., 1., 1., 1., 1., 1.};
  // const float points[n_polys*3] = {0,0,0};



  const int n_polys = 1;
  const int n_rays = 96;
  const int n_faces = 188;
  
  // real verts
  const float verts[n_rays*3]{-1.0,0.0,0.0,-0.92,0.26,-0.28,-0.86,-0.51,0.04,-0.8,0.47,0.36,-0.75,-0.11,-0.65,-0.71,-0.38,0.6,-0.67,0.72,-0.19,-0.63,-0.69,-0.36,-0.6,0.27,0.75,-0.57,0.31,-0.76,-0.54,-0.76,0.36,-0.51,0.82,0.26,-0.49,-0.44,-0.75,-0.47,-0.19,0.86,-0.45,0.73,-0.51,-0.42,-0.9,-0.12,-0.41,0.59,0.7,-0.39,0.04,-0.92,-0.37,-0.66,0.66,-0.35,0.94,-0.04,-0.33,-0.72,-0.6,-0.32,0.13,0.94,-0.3,0.54,-0.78,-0.29,-0.93,0.21,-0.27,0.83,0.48,-0.26,-0.29,-0.92,-0.25,-0.41,0.88,-0.23,0.9,-0.38,-0.22,-0.92,-0.33,-0.21,0.46,0.87,-0.19,0.25,-0.95,-0.18,-0.83,0.53,-0.17,0.97,0.17,-0.16,-0.6,-0.78,-0.15,-0.08,0.99,-0.14,0.73,-0.67,-0.12,-0.99,0.0,-0.11,0.74,0.67,-0.1,-0.09,-0.99,-0.09,-0.6,0.79,-0.08,0.98,-0.18,-0.07,-0.84,-0.53,-0.06,0.26,0.96,-0.05,0.46,-0.89,-0.04,-0.94,0.35,-0.03,0.93,0.38,-0.02,-0.43,-0.9,-0.01,-0.29,0.96,0.01,0.86,-0.51,0.02,-0.98,-0.21,0.03,0.58,0.81,0.04,0.12,-0.99,0.05,-0.76,0.65,0.06,1.0,0.04,0.07,-0.71,-0.7,0.08,0.05,1.0,0.09,0.63,-0.77,0.1,-0.99,0.14,0.11,0.82,0.56,0.12,-0.22,-0.97,0.14,-0.49,0.86,0.15,0.94,-0.31,0.16,-0.9,-0.41,0.17,0.38,0.91,0.18,0.33,-0.93,0.19,-0.87,0.46,0.21,0.95,0.24,0.22,-0.53,-0.82,0.23,-0.16,0.96,0.25,0.76,-0.6,0.26,-0.96,-0.08,0.27,0.66,0.7,0.29,-0.01,-0.96,0.3,-0.64,0.71,0.32,0.94,-0.09,0.33,-0.75,-0.57,0.35,0.17,0.92,0.37,0.49,-0.79,0.39,-0.89,0.25,0.41,0.82,0.41,0.42,-0.32,-0.85,0.45,-0.33,0.83,0.47,0.8,-0.38,0.49,-0.83,-0.25,0.51,0.44,0.74,0.54,0.17,-0.82,0.57,-0.67,0.48,0.6,0.79,0.1,0.63,-0.51,-0.59,0.67,-0.02,0.74,0.71,0.49,-0.51,0.75,-0.66,0.04,0.8,0.46,0.38,0.86,-0.07,-0.51,0.92,-0.22,0.32,1.0,0.0,-0.0};
  
  const int faces[n_faces*3] = {53,61,74,74,61,69,56,77,69,40,61,53,0,3,5,12,7,20,25,12,20,17,12,25,51,59,72,33,25,20,1,3,0,27,19,14,14,22,27,27,22,35,27,40,19,14,19,6,3,1,6,16,3,11,3,6,11,11,6,19,8,3,16,16,21,8,8,5,3,86,78,73,95,90,93,63,76,55,71,76,63,55,76,68,84,76,71,73,78,65,26,39,18,18,39,31,31,23,18,44,23,31,82,74,69,69,77,82,82,77,90,43,56,35,35,22,43,35,56,48,61,40,48,69,61,48,48,56,69,48,27,35,40,27,48,19,40,32,53,45,32,32,40,53,9,22,14,17,22,9,14,6,9,9,6,1,38,59,51,17,25,38,85,72,80,77,72,85,90,77,85,85,93,90,51,72,64,64,72,77,77,56,64,64,43,51,56,43,64,80,72,67,67,72,59,41,54,33,41,33,20,33,54,46,59,38,46,46,67,59,54,67,46,25,33,46,46,38,25,7,12,4,4,1,0,4,9,1,4,12,17,17,9,4,53,74,66,66,45,53,66,58,45,24,32,45,16,11,24,24,11,19,19,32,24,13,8,21,5,8,13,21,26,13,18,5,13,13,26,18,94,86,89,76,84,89,91,86,94,91,94,95,95,93,91,78,86,91,50,58,71,71,63,50,60,68,73,10,5,18,18,23,10,28,41,20,49,41,28,36,23,44,49,28,36,36,28,23,52,65,44,44,31,52,52,31,39,39,60,52,73,65,52,52,60,73,78,70,57,57,65,78,44,65,57,57,70,49,49,36,57,57,36,44,34,26,21,30,22,17,30,43,22,17,38,30,51,43,30,30,38,51,83,70,78,78,91,83,75,67,54,70,83,75,80,67,75,71,58,79,58,66,79,79,84,71,79,66,74,81,68,76,76,89,81,73,68,81,81,86,73,81,89,86,92,89,84,84,79,92,95,94,92,94,89,92,92,90,95,16,24,37,37,24,45,45,58,37,58,50,37,42,63,55,42,50,63,55,34,42,42,34,21,55,68,47,68,60,47,47,34,55,47,60,39,39,26,47,26,34,47,2,10,7,5,10,2,0,5,2,2,4,0,7,4,2,7,10,15,15,10,23,23,28,15,20,7,15,15,28,20,62,75,54,62,41,49,54,41,62,49,70,62,70,75,62,80,75,88,88,75,83,88,85,80,93,85,88,88,91,93,88,83,91,74,82,87,87,79,74,87,92,79,87,82,90,90,92,87,29,21,16,29,42,21,16,37,29,29,37,50,50,42,29};

  const float scores[n_polys] = {1.};
  const float dist[n_polys*n_rays] = {1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f};
  const float points[n_polys*3] = {20,20,20};

  const int labels[1] = {15};
  
  bool result[1];
  
  non_maximum_suppression_sparse(scores, dist, points,
                                 n_polys, n_rays, n_faces,
                                 verts, faces,
                                 result );

 
  const int N = 50;
  int label_result[N*N*N];

  polyhedron_to_label(dist, points,verts, faces, n_polys, n_rays, n_faces, labels, N, N, N, label_result);

}
